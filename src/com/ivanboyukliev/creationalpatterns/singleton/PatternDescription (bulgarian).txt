                                                                                   III. Singleton


1.Основна идея :

-> Чрез този шаблон се осигурява, че в паметта ще има само една инстанция на дадения клас и ще се предостави глобал точка за достъп до нея
-> Примери за места, в които се използва Singleton : logging, driver objects, caching, thread pool

2. Предимства

-> Стриктен контрол върху това как и кога клиентите могат да достъпват инстанцията
-> В бъдеще, ако се наложат повече истанции от този клас и той вече не е Singleton, се правят лесно корекции.

3. Недостатък

-> Трудности, когато се пишат тестове за singleton класове.
-> Създават се скрити зависимости: 

2. Поглед върху имплементацията на шаблона

-> Singleton шаблона има специален метод, който се използва за инстанциране на желания обект. Когато този метод бъде извикан се прави проверка дали обектът вече не е инстанциран. Ако
   това е така методът просто връща референция към обекта. В противен случай методът създава инстанциця и я връща.

3. Избор между Dependency Injection и Singleton.

-> Когато искаме да пишем код, който е лесен за тествавне избираме Dependency Injection шаблона (при Singleton има статични членове, което затруднява тестването).

4. Кога Singleton има преимущество пред Dependency Injection ?

-> Когато има *ambient dependencies : множество класове капсулират инстанцията на обект от друг клас и следователно многократно трябва да бъде предаван injector обекта между тях.
   Пример: Когато има тенденция за логване на много събития на различни места от прогрмата, не е практично да се предава logger инстанцията на всеки клас, който имат dependency към него.

-> Важно е поддържането на баланс между зависимостите предствени чрез Singleton и зависимостите инжектирани чрез DI принципите


-> !!! Ако имаме ambient dependency (обект от даден клас се използва в много други класове и на различни нива от системата), е добре да използваме Singleton.

5. Аспекти при имплемнтацията

    Singleton шаблонът може да бъде имплементиран чрез различни подходи, но всички имат следната обща концепци:
     
     1) Конструкторът на класът е private. По този начин се ограничава възможността за съдаване на инстанции на класа от други класове.
     2) Класът трябва да има член private static обект от същия клас, който ще предствлява единствената инстанция на класа
     3) Глобална точка за достъп до инстанцията : public static метод, който връща единствената инстанция на класа

6. Варианти за прилагане на Singleton шаблона:

   [1] Lazy evaluation : не се препоръчва за многонишкови системи

   [2] Synchronized : използва се, когато прозиводителността не е от такова голямо значение ; може да се приложи в многонишкова среда

   [3] Double-checked locking principle : приложим в многонишкови системи, по-добра прозиводителност от [2]

   [4] Eager evaluation approach : приложим в многонишкова среда ; икономичен откъм използвани ресурси ; използва се, когато системата
                                   винаги има необходимост от инстанция на дадения Singleton клас ; недостатък: инстанцията се създава
                                   дори клиентското приложение да няма нужда от нея на този етап
    
   [5] Bill Pugh approach (най-препоръчвания) : приложим в многонишкова среда ; високопроизводителен ; инстанцията се създава, когато клиентът
                                                реши, че му трябва