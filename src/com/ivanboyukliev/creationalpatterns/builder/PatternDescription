
									                          IV. Builder

1. Основна идея

-> Отделяне на логиката свързана с конструрирането на сложен обект от неговото представяне
-> Използва се постъпков модел за изграждането на обект
-> Намира приложение, когато изграждаме обект, който е композиран от много други членове
-> До този шаблон се стига, защото в някои ситуации има пороблеми с използването на Factory и Abstract Factory шаблоните. Те не работят добре, когато създаваният обект
   има много атрибути, които трябва да се предават от потребителя към factory класа. Също така ако даден атрибут е опционален, то потребителят трябва да подава null.
   При Builder шаблона обектът се изгражда постъпково и метод накрая, който връща финалния вид на създавания обект.

2. Предимства

-> Капсулира начина, по който комплексен обект се конструира. Разделя кода асемблиращия код от представителния. Скрива сложния процес по изграждане, като го преставя  във вид
   на прости стъпки.

-> Имплементациите на продукта могат да се заменят лесно, защото откъм клиентска страна се вижда единствено абстрактен интерфейс.

-> фокусира се върхи "как продуктът ще бъде изграден"

2. Недостатъци

-> Когато клиентско приложение използва даден Builder шаблона се изискват повече знания от страна на клиента за конкретния домейн на обекта.
-> Изисква повтарямост на код
-> ! Шаблонът не приложим, ако искаме да модифицираме обекта след неговото създаване.

3. Имплементация на шаблона

 -> Главни компоненти:
     1) Builder : указва абстрактен интерфейс за създаване не частите състваящи един продуктов обект. Трябва да достатъчно генерализиращ, така че да позволва конструирането на
                  всякакъв вид конкретни Builder класове

     2) ConcreteBuilder : конструира и асемблира частите на продукта, като имплементира Builder интерфейса. Overrid-ва операции на компонентите, които е заинтересован да създаде.

     3) Director : Конструира обекта, като използва Builder интерфейса.

     4) Product : Представлява комплексният обект, който е конструиран. ConcreteBuilder създава вътрешното представяне на продукта и дефинира процеса, по конструрането му


    Как отделните компоненти работят заедно ? : Клиентът създава Director обекта и го конфигурира с даден Builder. Director известява Builder-a, когато дадена част от продукта
                                               трябва да бъде посторена. Builder-ът обработва заявките от Director-a и добавя частите към продукта. Клиентът накрая извлича продукта
                                               от Builder-а.
