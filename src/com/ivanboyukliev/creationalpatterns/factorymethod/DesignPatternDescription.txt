
                                                                        I. Factory Method

1. Основна идея:

-> Чрез този шаблон за дизайн се дефинира интерфейс за създаване на обект (Creator)
-> Използва се когато даден клас трябва да създаде инстанция на наследяващ клас на друг клас, но не знае кой точно от всички да избере.
-> Създава обекта без да показва логиката директно на клиента (Creator - създаващия клас), която стои зад създаването. Новосъздадения обект се реферира чрез използването на
   общ интерфейс (Product)
2. Пример

  -> Да приемем, че има два типа телевизори: LCD и LED. Ако един от тези телевизори се повреди ще трябва да извикаме техник. Техникът обаче първо ще попита какъв е неработещия телевизор.
   В зависимост от нашия отговор той ще вземе нужните инструменти.

  -> Примери от JDK : getInstance(), valueOf(), SAXParserFactory......

3. Предимства

  -> Разделяне(decoupling) на бизнес логиката сързана със създаването на класа от същинската логика при използването му. Могат да се добвят допълнителни Products или да се променя
     имплементацията на даден Product и това няма да окаже влияние на Creator интерфейса. Creator-ът не е тясно обвързан с конкретен Product.
  -> Позволява промяна на дизайна на приложението да става по-лесна. Прави кода  по-лесен за разширяване.
  -> Насърчава подхода за coding to an interface за сметка на coding into implementation.

4. Недостатъци

  -> Може да се наложи на клиентите да създават клас, който да наследява Creator класа само с намерениято да създадат обект от конкретен Product клас. По този начин клиентът трябва
     да се справи с още една промяна.
  -> Прави изходния код по-труден за четен, защото по-голяма част от него стои зад абстракции

  -> В определени случаи може да се класифицира като anti-pattern (overengineering).

5. Начини за имплементация

1) Най-стриктната имплементация на шаблона : Creator класът е абстрактен клас. Създават се наследници на този клас, които се явят конкретни creator-и на съответните продукти.
   За да бъде използван factory методът просто се специфицира инстанцията на конкретната factory creator имплементация и се извиква factory методът
   Недостатъкът на този подход, е че всеки нов продукт трябва наследява абстрактния Creator клас и  да имплементира factory методите.

2) Имплементация с конкретен Factory клас : Не се използва абстрактен Factory клас и за това не се налага създаването на нови Concrete Creator класове за всеки продукт.
   Създава се една инстанция на конкретен factory клас и посредством нея се извиква метод, на който се подава като параметър низ съдържащ името на желания продукт, който
   искаме да бъде създаден.

3) Имплементация с използването на статичен метод във factory класа. По този начин се спестява създаването на инстанция на Factory класа.