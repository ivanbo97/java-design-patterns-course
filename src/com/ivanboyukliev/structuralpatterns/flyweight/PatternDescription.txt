                                                                                  VI. Flyweight

1. Основна идея

-> Шаблонът изначално се използва за намаляване на зъдаваниете обекти. По-малко обекти води до по-малко заета памет. Използването на паметта се намалява също от споделяне на общи данни.

-> Стреми се да използва вече създадени подобни обекти, като ги съхранява. Една и съща инстанция на даден клас може да предоставя много "виртуални инстанции"

-> Flyweight обектите се споделят и не подлежат на промяна, след създаването им (immutable).

-> Flyweght обектите могат да се използват в различни контексти едновременно, като се държат като действително създадени отделни обекти.

2. Flyweight състояния

  1) Intrinsic state / properties - могат да се съхраняват във Flyweight обекта и да се споделят независмо от контекста, в който се използва той.
  2) Extrinsic state / properties - зависят от конкретния контекст, в който се използва Flyweight обекта и не се споделят. Клиентските обекти определят състоянието и го предават към
                                    Flyweight

   Пример: Да приемем, че създаваме приложение тип текстов редактор. Всеки символ на екрана има своята програмна репрезентация като обект от клас Character. Aтрибутите на Character
           класа са кокнкретна буква, шрифт и размер. Ключово е, че не трябва да създаваме обект от клас Character, всеки път когато клиентът въведе символа 'B'. Това би било неефективно
           откъм използване на ресурси. Ако добавим още атрибути към Character класа като например - ред и колона, на която е позциониран символът в документа. Тук обаче можем да заключим,
           че няма как символите да имат една и съща позиция. Следователно характериситиките ред и колона няма да бъдат intrinsic, и не могат да бъдат споделени между обектите (явяват се
           extrinsic - външни).

3. Предимства

-> Намалява броя на обектите в паметта at runtime

-> Централизира състоянието на много "виртуални" обекти в една локация в паметта

-> Много инстации могат да се управляват по един и същ начин

4. Недостатък

-> Единичните, логически инстанции на класа няма да могат да се държат независимо от другите

5. Кога да използваме Flyweight шаблона ?

-> Когато приложението използва голям брой обекти от един и същи клас, които се различават минимално по съдържание (extrinsic data).

-> Когато приложението не зависи от идентичността на обектите. Тъй като Flyweight обектите могат да бъдат споделяни, тестовете за идентичност биха върнали истина за концептуални различни обекти.

6. Участници в имплементацията

  1) Flyweight - дефинира интерфейс, на база на който flyweight обектите могат да модифицират еxtrinsic данните (тези които не са споделни а са конкретни за съответния контекст)

  2) ConcreteFlyweight - имплементира Flywight инерфейса и добавя storage (if any) ??? ; трябва да бъде споделян ;  всяко състояние, което съхранява трябва да е от intrinsic тип (трябва да
                        бъде незавсим от конкретния контекст на ConcreteFlyweight обекта)

  3) UnsharedConcreteFlyweight

  4) Flyweight Factory - създава и управлява Flyweight обектите. Подсигурява правилното споделяне на flyweight обектите. Когато клиентът даде заявка за flyweight, FlyweightFactory обектът
                         предоставя съществуваща вече инстанция или създава такава, ако не съществува

  5) Client - поддържа референция към flyweight обектите. Изчислява и съхранява extrinsic (несподелените) състояния на flyweight обектите.

7. Механиъм на взаимодействие на компонентите в шаблона

-> Първоначално трябва да се определи кои данни ще се споделят между обектите (instrinsic) и кои не (extrinsic)

-> Споделяните данни се съхраняват в ConcreteFlyweight обекти

-> Несподелените данни (униклните за всеки обект) се съхраняват или изчисляват от клиентските обекти. Клиентите предават несподелените данни към flyweight обектите, когато извикват някоя негова
   функционалност.

-> Клиентите не трябва да инстанцират директно ConcreteFlyweight класовете. Те трябва изрично да ги получат от FlyweightFactory обекта, защото той подсигурява правилното споделяне. Често flyweight обектите
   се съхраняват в някаква асоциативна структура (например hashmap) и оттам се извличат.

8. Проблеми при имплементация

-> Прилагането на шаблона може да добави допълнителен разход на ресурси свързан с трансфер, откриване и/или изчисление на състоянията, които не са споделени (extrinsic)

-> Приложимостта на шаблона се определя от това доколко лесно е да се дефинират еxtrinsic данните и да се премахнат от споделените обекти.

-> По-добре е да се изчисляват extrinsic състоянията отколкото да се съхраняват

-> Flyweight шаблона няма да спомогне за намаляването на изпозлваната памет, ако обектите имат много extrinsic състояния