                                                                                    III. Composite

1. Основна идея

-> Compsite се нарича обект, който е изграден от един или повече подобни обекти, които предоставят подобна функционалност
-> Когато имаме много обекти имащи общи функционалности ние създаваме Composite (съставен) обект - създаваме клас, съдържащ група от обекти от същия клас
-> Позволява ни да изграждаме структури от обекти във вид на дървета.
-> Чрез използването на съставна (composite) структура , можем да прилагаме едни и същи операции както върху съставените обекти (composites), така и върху
   индивидуалните. Можем да игнорираме разликите между композиции от обекти и отделни обекти.
-> !!! Главната цел на Composite шаблона е да позволява манипулирането на една инстанция на обекта по същия начин, по който би била манипулирана и група от такива обекти.

2. Примери за съставни структури

-> графичните приложения предоставят възможност на потребителите да градят сложни диаграми от прости компоненти. Потребителите могат да групират компонентите, за да формират
   по-големи структури

-> вложени групи менюта и елементи от самите мензта в GUI

3. Кога да използваме Composite шаблона

-> Когато клиентите трябва да игнорират разликата между композициите от обекти и индивидуалните обекти. Използване на множество обекти по еднакъв начин с приблизително
   идентичен код, който ги управялва.

-> Когато изпозлваната памет и изчислителни ресурси е от ключово значение

-> Когато сме принудени да поддържаме йерархичност

4. Предимства

-> Прави лесно добавянето на нови видове компоненти
-> Прави имплементацията на клиентите по-лесна. Те не се интересуват дали работят с leaf или композиция от обекти


5. Недостатък : Прилагането на шаблона прави по-трудно ограничаването на типовете компоненти на един съставен обект. Не може да се разчита на
                вградената в Java система за следене на типовете, да налага ограничения. Трябва да се пишат run-time проверки.

6. Компоненти от имплементацията на шаблона

  1) Component - декларира интерфейс за обектите в композицията ; съдържа функционалността, която е характерно както за leaf обектите, така и за съставните (composites)
  2) Leaf - представялява обектите, които не капсулират други обекти ; дефинира поведението на примитивните обекти в една композиция
  3) Composite - дефинира поведението на компонените, които капсулират други обекти ; съдържат child компонентите ; имплементира функционалностите от Component интерфейса,
                 които са свързани с child елементите
  4) Client - манипулира обектите в композицията през Component интерфейса ; прави групиранеето : обавяне на компоненти към други компоненти

7. Детайли относно използването

-> Клиентът използва интерфейса на Component клас, за да взаимосдейства с обектите в съставната структура ; ако обектът на интерес е leaf (листо) заявката се изпълнява
   директно. Ако обектът е съставна структура, обикновено заявка се праща към child компонентите в него

8. Недостатък на шаблона : шаблонът се фокусира върху яснотата и не спазва стриктно SRP (Single Responsibility Principle). В компонент класа се съдържат както операции
                           присъщи за leaf обектите, така и операции свързани с composite обектите.