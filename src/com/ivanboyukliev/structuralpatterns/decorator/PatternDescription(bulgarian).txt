
                                                                                   IV. Decorator

1. Основна идея

-> Decorator шаблонът позволва динамичното добавяне на допълнителна функционалност към обект. Алтернатива е на използването на наследяващ клас за добавяне на функционалност.
-> Основният принцип заложен в шаблона е, че не може да модифицираме съществуващите функционалности, но може да можем да ги разширяваме (open for extension close for modification).
-> !!!Decorator се използва от обект от даден клас at runtime, като другите инстанции на същия клас няма да бъдат засегнати от промените.

2. Защо пък да не се изолзва наследяване (inheritance) ?

-> С Decorator ние искаме до добавяме функционалност към индивидуални обекти, не към целия клас.

3. Пример

-> Да си представим, че притежаваме къща и искаме да построим още един етаж към нея. Логично е, че не бихме искали и не се налага да променяме архитектурата на приземния етаж,
   за да надрагдим. (ще използваме Decorator).

-> Да приемем, че имаме TextView обект, който изобразява текст в прозорец. По подразбирне Textview не притежава ScrrollBar, защото не винаги е необходим. Когато имаме нужда от такъв, ще
   използваме ScrollDecorator.

4. Предимства

-> По-голяма гъвкавост в сравнение със статичното наследяване
-> Можем да пишем кода инкрементално. Първо правим една изчистена структура на класа и след това един по един добавяме decorator обекти. По този начин избягваме в начолото да мислим за
   конкретни сценарии.

5. Недостатък

-> Използването на този шаблон предразполага наличието на по-голям брой малки по обем класове, което може да бъде объркващо при дебъгване

6. Кога е добре да се използва Decorator шаблонът?

-> Когато разширяването на функционалността чрез класово наследяване е непрактична или пък е невъзможна (final класове).

7. Имплементация

-> При Decorator шаблона се създава едно множество от decorator класове, които се използват за опаковане (wrapping) на компонентите, по този начин се добавя новата функционалност
   пазейки сигнатурата на методите непокътната.

-> Декоратор класовете правят огледален образ на типа на компонените, които ще декорират (те са от типа на декорираните компоненти)

-> Компонентите може да се декорират с какъвто и да е брой декоратори

-> Декораторите обикновена са прозрачни от гледната точка на клиените на дадените компоненти

8. Основни елементи при Decorator шаблона за дизайн

  1) Component - интерфейсът на обектите, които ще бъдат декорирани динамично
  2) ConcreteComponent - обектът, на който ще се добавя нова функционалност
  3) Decorator - притежава референция към Component обекта, който ще бъде декориран. Дефинира интерфейс, който е съобразен с Component интерфейса
  4) ConcreteDecorator - добавя нови функционалности към Component