

                                                                                      V. Facade

1. Основна идея

-> Facade шаблонът за дизайн предоставя унифициран (обединен) интерфейс към множество от други интерфейси в системата. Дефинира интерфейс от по-високо ниво на абстракция, което парви
   системата по-лесна за използване. По този начин се скрива сложността на подсистемните интерфейси, като не се добавя никаква допълнителна функционалност.

-> Фасада от гледна точка на сградите означава лицевата част на една постройка, което е първото нещо виждано от хората. Те нямат предства за окабеляване, всъчки тръби и други сложни системи.

-> Facade шаблонът е помощник за клиентските приложения

-> Дали да се използва Facade или не изцяло зависи от клиентския код

-> Може да се добавя във всеки един етап на софтуерната разработка, особено когато броят на интерфейсите нарасне и системата стане прекалено сложна

-> Отделните интерфейси, които ще бъдат обединени не трябва да знаят за съществуващия Facade интерфейс (те са напълно независими от него - decoupled)

2. Предимства

-> Намаляване на броя на интерфейсите, с които клиентът трябва да взаимодейства
-> Шаблонът поддържа идеята за слаба свъързаност между компонентите на системата (loose coupling)
-> Помага за структурирането на системата в слоеве - елеминират се кръговите зависимости
-> Намаля компилационните зависимости в по-големите системи
-> Улеснява интеграцията на системата в други системи
-> Приложението все пак може да използва подинтерфейсите, ако прецени, че това е по-подходящо и да не занимава с фасадата.

3. Кога да се използва фасада ?

-> Когато целим изграждането на системата по слоеве. Използва се фасада за дефиниране на входната точка към всяка подсистема.

4. Facade vs Adapter cs Decorator

-> Adapter шаблонът опакова обект, за да адаптира неговата функционалност към съществуваща така в системата.
-> Decorator шаблонът опакова обект, за да добави нова функционалност към него динамично.
-> Facade шаблонът опакова множество обекти, за да опрости взаимодействието с тях.

5. Участници в имплементацията на шаблона

   1) Facade - при конкретна заявка знае кои са отговрните подсистемни класове, които трябва да я изпълнят. Делегира клиентските заявки към подходящите подсистемни обекти.
   2) Подсистемни класове - Вършат работата делегирана от Facade. Не знаят, че фасадата всъщност съществува (не съхраняват рефернции към нея)

6. Механизъм на взаимодействие

-> Клиентите компуникират с подсистемата чрез изпращането на заявки (извикването на методи) към Facade. Фасадата препраща заявките към подходящите подсистемни обекти. Подсистемните
   обекти извършват същинската работа. Може да се наложи и фасадата да свърши някаква работа по "нагласяне" на нейния интерфейс към интерфейса на подсистемата. Клиентите, които използват
   фасадата не се налага да са запознати със подсистемните обекти.