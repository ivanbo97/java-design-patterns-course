                                                                                 IV. Iterator

1. Основна идея

-> Предоставяне на лесен достъп до елементие от колекция, без да се интересуваме каква е конкретната функция на тези елементи и какви данни са капсулирани в тях.

-> В Java има Iterator интерфейс.

-> Iterator обекта следи кой е текущия елемент и знае кои елементи са вече обходени.

2. Пример : Да приемем, че компания А съхранява данни за своите работници в свързан списък, а компания B в голям масив. Ако искаме да обходим и двете структури по едакъв начин можем да използваме Iterator.

3. Кога е добре да използваме шаблона ?

-> Когато искаме да предоствим стандартен начни за итериране през обектите на една колекция, като скриваме от клиента имплементационната логика.

4. Компоненти участващи в имплементацията

  1) Iterator : дефинира интерфейс за достъп до обхожданите елементи (методи - first(), next(),isDone(),currentItem()...)

  2) ConcreteItrator : имплементира Iterator интерфейса и следи за текущата позиция в обхождането

  3) Aggregate : дефинира интерфейс за създаване на Iteraor обект ; всъщност предствлява някаква колекция.

  4) ConcreteAggregate : имплментира Aggregate, за да върне инстанция на подходящия ConcreteIterator

-> Имплементацията предоставя различни вариации в обхождането на един aggregate.(preorder/inorder)

-> Итераторите правят лесна смяната на алгоритъма за обхождане. Просто се подменя инстанцията. Могат да се дефинират и наследници на Iterator класа, които да поддържат нови начини на обхождане.

-> Може да има повече от едно обхождане на дадена колекция в даден момент.
