									       V. Mediator


1. Основна идея

-> Шаблонът дефинира обект, който капсулира механизмът, по който взаимодействат множество от други обекти. Постига слабо сързаване между класовете (loose coupling).

-> Другите обекти в системата са наясно със същестуването на този медиатор(посреднически) обект.

-> Използва се намаляване на сложността при комуникация между множество обекти или класове.

2. Примери

-> Диспечер на летищеото : работи като просредник между различните полети

-> Може да се използва в smart home концепцията.

-> java.util.Timer class scheduleXXX() методите

-> Java Message Services (JMS)

4. Предимства

-> Повишава възможността за преизползване на отделните обекти (decoupling)

-> Опростява поддръжката на системата чрез централизирана логика

-> Опростява и намалява разнообразието на съобщенията предавани между обектите в системата

-> Позволява замяната на един обект от структурата с друг без да се повлияват класовете и интерфейсите

-> Не трябва да използваме шаблона с единствената идея за lose-coupling

5. Кога да използваме шаблона?

-> Когато едно множество от обекти комуникират по добре дефиниран, но сложен начин: вътрешните зависимости са неструктурирани и трудни за разбиране

-> Когато преизползването на обект е трудно, защото реферира към и комуникира с много други обекти

-> Когато определено поведение, което разпределено между няколко класа, трябва да бъде надграждано без прилагането на много наследяване.

6. Компоненти от шаблона

   1) Mediator : дефинира интерфейс за комуникация с Colleague обекти

   2) ConcreteMediator : имплментира съвместното поведение чрез кординиране на Colleague обектите. Знае кои са неговите Colleagues и ги поддържа.

   3) Colleague : системни обекти, които комуникират помежду си; всеки Colleague обект знае своя Mediator обект; всеки Colleague комуникира с неговия Mediator, всеки път когато му се налага
                  комуникация с друг Colleague. Colleague обектът изпраща и получава заявки от Mediator обекта. Медиаторът имплементира съвместното поведение чрез рутиране на на заявките между
                  подходящите Colleagues.

7. Педимства на имплементацията

-> Ограничава небходимостта от създаването на подкласове. Медиаторът локализира дадено поведение, което в противен случай би било разпределено между няколко обекта. Бъдеща промяна в това поведение
   би наложила единствено създаване на подклас на Mediator класа, а не colleague класовете.

-> Заменя се many-to-many връзката между класовете с one-to-many, които са по-лесни за поддръжа и разширяване.
